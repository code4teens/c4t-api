openapi: 3.0.3
info:
  title: Code4Teens REST API
  version: 1.0.0

servers:
  - url: /api/v1

paths:
  /users:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Returns all users
      operationId: user.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Unauthorised'
    post:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Creates user
      operationId: user.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: User 111111111111111111 already exists
  /users/{id}:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Returns user
      operationId: user.get_one
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Unauthorised'
        404:
          $ref: '#/components/responses/404UserNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Updates user
      operationId: user.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUser'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404UserNotFound'
    delete:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Deletes user
      operationId: user.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: User 111111111111111111 deleted
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404UserNotFound'
  /users/{id}/password:
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Updates user password
      operationId: user.update_password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: new_password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Updated password for user 111111111111111111
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404UserNotFound'
  /users/{id}/login:
    post:
      tags:
        - User
      summary: Logs user in
      operationId: user.login
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: xxxxx.yyyyy.zzzzz
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Wrong password for user 111111111111111111
        404:
          $ref: '#/components/responses/404UserNotFound'
  /users/{id}/api_key:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Returns user API key
      operationId: user.get_api_key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    example: xxxxx
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404UserNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - User
      summary: Updates user API key
      operationId: user.update_api_key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Updated API key for user 111111111111111111
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404UserNotFound'
  /bots:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Bot
      summary: Returns all bots
      operationId: bot.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        401:
          $ref: '#/components/responses/401Unauthorised'
    post:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Bot
      summary: Creates bot
      operationId: bot.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bot'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: Bot 888888888888888888 already exists
  /bots/{id}:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Bot
      summary: Returns bot
      operationId: bot.get_one
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        401:
          $ref: '#/components/responses/401Unauthorised'
        404:
          $ref: '#/components/responses/404BotNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Bot
      summary: Updates bot
      operationId: bot.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialBot'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404BotNotFound'
    delete:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Bot
      summary: Deletes bot
      operationId: bot.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Bot 888888888888888888 deleted
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404BotNotFound'
  /cohorts:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Cohort
      summary: Returns all cohorts
      operationId: cohort.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cohort'
        401:
          $ref: '#/components/responses/401Unauthorised'
    post:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Cohort
      summary: Creates cohort
      operationId: cohort.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: Cohort 1 already exists
  /cohorts/{id}:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Cohort
      summary: Returns cohort
      operationId: cohort.get_one
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        401:
          $ref: '#/components/responses/401Unauthorised'
        404:
          $ref: '#/components/responses/404CohortNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Cohort
      summary: Updates cohort
      operationId: cohort.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialCohort'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404CohortNotFound'
    delete:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Cohort
      summary: Deletes cohort
      operationId: cohort.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Cohort 1 deleted
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404CohortNotFound'
  /enrolments:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Enrolment
      summary: Returns all enrolments
      operationId: enrolment.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrolment'
        401:
          $ref: '#/components/responses/401Unauthorised'
    post:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Enrolment
      summary: Creates enrolment
      operationId: enrolment.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrolment'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrolment'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: Enrolment 1 already exists
  /enrolments/{id}:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Enrolment
      summary: Returns enrolment
      operationId: enrolment.get_one
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrolment'
        401:
          $ref: '#/components/responses/401Unauthorised'
        404:
          $ref: '#/components/responses/404EnrolmentNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Enrolment
      summary: Updates enrolment
      operationId: enrolment.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialEnrolment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrolment'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404EnrolmentNotFound'
    delete:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Enrolment
      summary: Deletes enrolment
      operationId: enrolment.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Enrolment 1 deleted
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404EnrolmentNotFound'
  /evals:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Eval
      summary: Returns all evals
      operationId: eval.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eval'
        401:
          $ref: '#/components/responses/401Unauthorised'
    post:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Eval
      summary: Creates eval
      operationId: eval.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Eval'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Eval'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: Eval 1 already exists
  /evals/{id}:
    get:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Eval
      summary: Returns eval
      operationId: eval.get_one
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Eval'
        401:
          $ref: '#/components/responses/401Unauthorised'
        404:
          $ref: '#/components/responses/404EvalNotFound'
    put:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Eval
      summary: Updates eval
      operationId: eval.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialEval'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Eval'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404EvalNotFound'
    delete:
      security:
        - bearerAuth: []
        - apiKey: []
      tags:
        - Eval
      summary: Deletes eval
      operationId: eval.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Eval 1 deleted
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404EvalNotFound'

components:
  schemas:
    PartialUser:
      type: object
      properties:
        name:
          type: string
          example: johndoe
        discriminator:
          type: string
          minLength: 4
          maxLength: 4
          example: '1111'
        display_name:
          type: string
          example: John Doe
        xp:
          type: integer
          example: 0
        is_admin:
          type: boolean
          example: false
    User:
      allOf:
        - $ref: '#/components/schemas/PartialUser'
        - type: object
        - properties:
            id:
              type: integer
              minimum: 111111111111111111
              maximum: 999999999999999999
              example: 111111111111111111
            created_at:
              type: string
              readOnly: true
              example: '2021-04-20T08:42:00'
            last_updated:
              type: string
              readOnly: true
              example: '2021-04-20T08:42:00'
            bots:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedBot'
            enrolments:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedUserEnrolment'
            evals_as_evaluator:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedUserEvalEvaluator'
            evals_as_evaluatee:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedUserEvalEvaluatee'
        - required:
          - id
          - name
          - discriminator
          - display_name
          - xp
    NestedUser:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 222222222222222222
        name:
          type: string
          example: janedoe
        discriminator:
          type: string
          example: '2222'
        display_name:
          type: string
          example: Jane Doe
    PartialBot:
      type: object
      properties:
        name:
          type: string
          example: clockwork
        discriminator:
          type: string
          minLength: 4
          maxLength: 4
          example: '8888'
        display_name:
          type: string
          example: Clockwork the Bot
        user_id:
          type: integer
          writeOnly: true
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 222222222222222222
        msg_id:
          type: integer
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 333333333333333333
    Bot:
      allOf:
        - $ref: '#/components/schemas/PartialBot'
        - type: object
        - properties:
            id:
              type: integer
              minimum: 111111111111111111
              maximum: 999999999999999999
              example: 888888888888888888
            created_at:
              type: string
              readOnly: true
              example: '2021-04-20T08:42:00'
            last_updated:
              type: string
              readOnly: true
              example: '2021-04-20T08:42:00'
            user:
              type: object
              $ref: '#/components/schemas/NestedUser'
        - required:
          - id
          - name
          - discriminator
          - display_name
          - user_id
          - msg_id
    NestedBot:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 888888888888888888
        name:
          type: string
          example: clockwork
        discriminator:
          type: string
          minLength: 4
          maxLength: 4
          example: '8888'
        display_name:
          type: string
          example: Clockwork the Bot
    PartialCohort:
      type: object
      properties:
        name:
          type: string
          example: discord.py Botcamp
        nickname:
          type: string
          example: dpy
        duration:
          type: integer
          example: 42
        start_date:
          type: string
          format: date
          example: '2021-04-20'
        review_schema:
          type: object
          nullable: true
        feedback_schema:
          type: object
          nullable: true
    Cohort:
      allOf:
        - $ref: '#/components/schemas/PartialCohort'
        - type: object
        - properties:
            id:
              type: integer
              readOnly: true
              example: 1
            enrolments:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedCohortEnrolment'
            evals:
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/NestedCohortEval'
        - required:
          - name
          - nickname
          - duration
          - start_date
    NestedCohort:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: discord.py Botcamp
        nickname:
          type: string
          example: dpy
    PartialEnrolment:
      type: object
      properties:
        user_id:
          type: integer
          writeOnly: true
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 222222222222222222
        cohort_id:
          type: integer
          writeOnly: true
          example: 1
    Enrolment:
      allOf:
        - $ref: '#/components/schemas/PartialEnrolment'
        - type: object
        - properties:
            id:
              type: integer
              readOnly: true
              example: 1
            user:
              type: object
              $ref: '#/components/schemas/NestedUser'
            cohort:
              type: object
              $ref: '#/components/schemas/NestedCohort'
        - required:
          - user_id
          - cohort_id
    NestedUserEnrolment:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 1
        cohort:
          $ref: '#/components/schemas/NestedCohort'
    NestedCohortEnrolment:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/NestedUser'
    PartialEval:
      type: object
      properties:
        evaluator_id:
          type: integer
          writeOnly: true
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 111111111111111111
        evaluatee_id:
          type: integer
          writeOnly: true
          minimum: 111111111111111111
          maximum: 999999999999999999
          example: 222222222222222222
        cohort_id:
          type: integer
          writeOnly: true
          example: 1
        date:
          type: string
          format: date
          example: '2021-04-20'
        review:
          type: object
          nullable: true
        feedback:
          type: object
          nullable: true
    Eval:
      allOf:
        - $ref: '#/components/schemas/PartialEval'
        - type: object
        - properties:
            id:
              type: integer
              readOnly: true
              example: 1
            evaluator:
              type: object
              $ref: '#/components/schemas/NestedUser'
            evaluatee:
              type: object
              $ref: '#/components/schemas/NestedUser'
            cohort:
              type: object
              $ref: '#/components/schemas/NestedCohort'
        - required:
          - evaluator_id
          - evaluatee_id
          - cohort_id
          - date
    NestedUserEvalEvaluator:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 1
        evaluatee:
          $ref: '#/components/schemas/NestedUser'
        cohort:
          $ref: '#/components/schemas/NestedCohort'
        date:
          type: string
          example: '2021-04-20'
    NestedUserEvalEvaluatee:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 2
        evaluator:
          $ref: '#/components/schemas/NestedUser'
        cohort:
          $ref: '#/components/schemas/NestedCohort'
        date:
          type: string
          example: '2021-04-20'
    NestedCohortEval:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          example: 1
        evaluator:
          $ref: '#/components/schemas/NestedUser'
        evaluatee:
          $ref: '#/components/schemas/NestedUser'
        date:
          type: string
          example: '2021-04-20'
    Response:
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
  responses:
    401Unauthorised:
      description: Unauthorised
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Unauthorised
            status: 401
            detail: Missing, invalid or expired token
    403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Forbidden
            status: 403
            detail: Insufficient permission to access resource
    404UserNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Not Found
            status: 404
            detail: User 111111111111111111 not found
    404BotNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Not Found
            status: 404
            detail: Bot 888888888888888888 not found
    404CohortNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Not Found
            status: 404
            detail: Cohort 1 not found
    404EnrolmentNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Not Found
            status: 404
            detail: Enrolment 1 not found
    404EvalNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            title: Not Found
            status: 404
            detail: Eval 1 not found
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: models.User.decode_auth_token
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
      x-apikeyInfoFunc: models.User.validate_api_key