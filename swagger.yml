openapi: 3.0.3
info:
  title: Code4Teens REST API
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /users:
    get:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Returns all users
      operationId: user.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBots'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
    post:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Creates user
      operationId: user.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NaiveUser'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Forbidden
                status: 403
                detail: Insufficient permission to access resource
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: User 123456123456123456 already exists
  /users/{id}:
    get:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Returns user
      operationId: user.get_one
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBots'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: User 123456123456123456 not found
    put:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Updates user
      operationId: user.update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUser'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Forbidden
                status: 403
                detail: Insufficient permission to access resource
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: User 123456123456123456 not found
    delete:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Deletes user
      operationId: user.delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: User 123456123456123456 deleted
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Forbidden
                status: 403
                detail: Insufficient permission to access resource
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: User 123456123456123456 not found
  /users/{id}/password:
    put:
      security:
      - bearerAuth: []
      tags:
      - User
      summary: Updates user password
      operationId: user.update_password
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
            example:
              password: new_password
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Updated password for user 123456123456123456
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Missing, invalid or expired token
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Forbidden
                status: 403
                detail: Insufficient permission to access resource
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: User 123456123456123456 not found
  /users/{id}/login:
    post:
      tags:
      - User
      summary: Logs user in
      operationId: user.login
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Logged in as user 123456123456123456 with token xxxxx.yyyyy.zzzzz
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Unauthorised
                status: 401
                detail: Wrong password for user 123456123456123456
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: User 123456123456123456 not found
  /bots:
    get:
      tags:
      - Bot
      summary: Returns all bots
      operationId: bot.get_all
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
    post:
      tags:
      - Bot
      summary: Creates bot
      operationId: bot.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NaiveBot'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Conflict
                status: 409
                detail: Bot 654321654321654321 already exists
  /bots/{id}:
    get:
      tags:
      - Bot
      summary: Returns bot
      operationId: bot.get_one
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: Bot 654321654321654321 not found
    put:
      tags:
      - Bot
      summary: Updates bot
      operationId: bot.update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialBot'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: Bot 654321654321654321 not found
    delete:
      tags:
      - Bot
      summary: Deletes bot
      operationId: bot.delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: OK
                status: 200
                detail: Bot 654321654321654321 deleted
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                title: Not Found
                status: 404
                detail: Bot 654321654321654321 not found
components:
  schemas:
    PartialUser:
      type: object
      properties:
        name:
          type: string
          example: johndoe
        discriminator:
          type: string
          example: '4242'
        display_name:
          type: string
          example: John Doe
        cohort_id:
          type: integer
          example: 1
        is_admin:
          type: boolean
          example: false
    NaiveUser:
      allOf:
        - $ref: '#/components/schemas/PartialUser'
        - type: object
          properties:
            id:
              type: integer
              example: 123456123456123456
    User:
      allOf:
        - $ref: '#/components/schemas/NaiveUser'
        - type: object
          properties:
            created_at:
              type: string
              example: '2021-04-20T08:42:00'
            last_updated:
              type: string
              example: '2021-04-20T08:42:00'
    UserBots:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            bots:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 654321654321654321
    PartialBot:
      type: object
      properties:
        name:
          type: string
          example: clockwork
        discriminator:
          type: string
          example: '2121'
        display_name:
          type: string
          example: Clockwork the Bot
        user_id:
          type: integer
          example: 123456123456123456
        msg_id:
          type: integer
          example: 456123456123456123
    NaiveBot:
      allOf:
        - $ref: '#/components/schemas/PartialBot'
        - type: object
          properties:
            id:
              type: integer
              example: 654321654321654321
    Bot:
      allOf:
        - $ref: '#/components/schemas/NaiveBot'
        - type: object
          properties:
            created_at:
              type: string
              example: '2021-04-20T08:42:00'
            last_updated:
              type: string
              example: '2021-04-20T08:42:00'
    Response:
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: models.User.decode_auth_token
