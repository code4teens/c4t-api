openapi: 3.0.3
info:
  title: Code4Teens REST API
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /users:
    get:
      tags:
      - User
      summary: Returns all users
      operationId: user.get_all
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    discriminator:
                      type: string
                    display_name:
                      type: string
                    cohort_id:
                      type: integer
                    is_admin:
                      type: boolean
                    created_at:
                      type: string
                    last_updated:
                      type: string
                    bots:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          discriminator:
                            type: string
                          display_name:
                            type: string
                          msg_id:
                            type: integer
                          created_at:
                            type: string
                          last_updated:
                            type: string
    post:
      tags:
      - User
      summary: Creates user
      operationId: user.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                discriminator:
                  type: string
                display_name:
                  type: string
                cohort_id:
                  type: integer
                is_admin:
                  type: boolean
        required: true
      responses:
        201:
          description: Success!
          content:
            application/json:
              schema:
                type: object
  /users/{id}:
    get:
      tags:
      - User
      summary: Returns user
      operationId: user.get_one
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - User
      summary: Updates user
      operationId: user.update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                discriminator:
                  type: string
                display_name:
                  type: string
                cohort_id:
                  type: integer
                is_admin:
                  type: boolean
        required: false
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - User
      summary: Deletes user
      operationId: user.delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success!
          content: {}
  /users/{id}/password:
    put:
      tags:
      - User
      summary: Updates user password
      operationId: user.update_password
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
            example:
              password: new_password
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
              example:
                status: OK
                code: 200
                message: Updated password for user 123456123456123456
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
              example:
                status: Not Found
                code: 404
                message: User 123456123456123456 not found
  /bots:
    get:
      tags:
      - Bot
      summary: Returns all bots
      operationId: bot.get_all
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    discriminator:
                      type: string
                    display_name:
                      type: string
                    user_id:
                      type: integer
                    msg_id:
                      type: integer
                    created_at:
                      type: string
                    last_updated:
                      type: string
    post:
      tags:
      - Bot
      summary: Creates bot
      operationId: bot.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                discriminator:
                  type: string
                display_name:
                  type: string
                user_id:
                  type: integer
                msg_id:
                  type: integer
        required: true
      responses:
        201:
          description: Success!
          content:
            application/json:
              schema:
                type: object
  /bots/{id}:
    get:
      tags:
      - Bot
      summary: Returns bot
      operationId: bot.get_one
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Bot
      summary: Updates bot
      operationId: bot.update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                discriminator:
                  type: string
                display_name:
                  type: string
                user_id:
                  type: integer
                msg_id:
                  type: integer
        required: false
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Bot
      summary: Deletes bot
      operationId: bot.delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success!
          content: {}
components:
  schemas:
    response:
      properties:
        status:
          type: string
        code:
          type: integer
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# security:
#   - bearerAuth: []
